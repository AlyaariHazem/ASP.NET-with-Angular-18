import { Component, inject } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ToastrService } from 'ngx-toastr';


import { Class } from '../../../../core/models/class.model';
import { ClassService } from '../../../../core/services/class.service';
@Component({
  selector: 'app-study-year',
  templateUrl: './study-year.component.html',
  styleUrl: './study-year.component.scss'
})
export class StudyYearComponent {
  title = 'السنوات الدراسية';
  checkTOEdit = false;
  toastr = inject(ToastrService);
  formBuilder = inject(FormBuilder);
  classService = inject(ClassService);
  class: Class[] = [];

  form: FormGroup = this.formBuilder.group({
    id: [''],
    name: ['', Validators.required],
    state: [''],
    level: '',
    totalStudents:0,
    type: [],
    semester:''
  });

  ngOnInit(): void {
    this.refreshClass();
  }

  refreshClass(): void {
    this.classService.getClass().subscribe(clas => {
      this.class = clas;
      console.log('Classes:', this.class);
    });
  }

  close(): void {
    const modal = document.getElementById('id01');
    if (modal) {
      modal.style.display = 'none';
    }
  }
//this fucntion for display the edit form 
  patchClass(editClass: Class): void {
    const modal = document.getElementById('id01');
    if (modal) {
      this.checkTOEdit = true;
      modal.style.display = 'block';
      this.form.patchValue(editClass);
      console.log('Editing class:', editClass);
    }
  }

  editClass(): void {
    const clas = { ...this.form.value, id: this.form.value.id };
    this.classService.editClass(clas).subscribe(() => {
      console.log('class edited successfully');
      this.toastr.success('class edited successfully');
      this.close();
      this.refreshClass();
    });
  }

  deleteClass(clas: Class): void {
    this.classService.deleteClass(clas.id).subscribe(() => {
      console.log('class deleted:', clas);
      this.toastr.success('class deleted successfully');
      this.refreshClass();
    });
  }

  register(): void {
    if (this.form.valid) {
      if (this.checkTOEdit) {
        this.editClass();
      } else {
        this.addClass();
      }
    } else {
      console.log('Form is invalid', this.form);
    }
  }

  addClass(): void {
    const clas = { ...this.form.value, id: '' }; // Remove id before adding, as it will be generated by Firebase
    this.classService.addClass(clas).subscribe(clas => {
      this.toastr.success("Class added successfully");
      this.close();
      this.refreshClass();
    });
  }

}
